# 00-Basics


# WSL INSTALATION

- turn windows features on or off -> windows subsystem linux and virtual machine 
- install ubuntu


# SETUPS

## Anaconda Enviroment
- https://www.digitalocean.com/community/tutorials/how-to-install-the-anaconda-python-distribution-on-ubuntu-20-04
- conda create --name envname package1 package2 ... # create an enviroment and install packages like python, django, ...

- django-admin # show options of django


## Create Project

1. go to directory that you want create project
2. django-admin startproject <project name> # create django files
3. code .

- asgi and wsgi -> for deploying the project on server


### Connect to WSL in VS Code

- install wsl extension
- click on bottom-left of vscode >< to connect


## Django Enviroment

- python manage.py # show subcommands
- python <filename> # run

- python manage.py runserver # show a localhost address

- name of website is name of domain
- domain is mounted on IP address (IP: 127.0.0.1:8000)
- DNS -> domain name system that includes IP and domain name

### Create Modules

- python manage.py startapp <modulename> # create module (app)

- migrations folder # includes database changes
- models.py # includes entities
- admin.py # how to configs and display files that exist in model

- we should add modules we added to our project in part 'installed app' of the settings.py file

### URLS and Views

- we write views and functions in views file
- requests pass to those functions in views and return response 
- from django.http import HttpResponse # struct of response
```
def index(request):
    return HttpResponse("this is django cousr")
```

- we write addresses in urls file of each modules.
- we should make a list and add urls to it.

```
from django.urls import path	# import path format

from . import views

urlpatterns = [
    path('sunday', views.index)	# the way of add urls address and connecting to view. path('address', view we want to be connected)
]
```

- we should add this urls to main url of our app
- main urls.py file:
```
from django.urls import include	# for passing collection of urls in a each modules

urlpatterns = [
    path('admin/', admin.site.urls),
    path('challenges/', include('challenges.urls'))	# path('address name', include('appname.urls')) 
]
```

- http://127.0.0.1:8000/challenges/sunday # form of above url that we see in browser

- we can get value from url:
```
urlpatterns = [
    path('<str: day>', views.dynamic_days), # <data type : dynamic_value>
]
```

- pass value of url to view
```
def dynamic_days(request, day): # get day from url and pass it here
    return HttpResponse(f'day is : {day} and data is : {day_data}')
```

### Redirect
- the respone code of redirecting is 300
- we can get somthing in url (for example number of day) and redirected to another url (day of week):
```
def dynamic_days_by_number(request, day):
    days_name = list(days.keys())
    redirect_day = days_name[day - 1]
    return HttpResponseRedirect(f'/days/{redirect_day}') # get address and go to another url address
```


### Reverse

- use for dynamic path
- views file:
```
from django.urls import reverse

def dynamic_days_by_number(request, day):
    days_name = list(days.keys())
    redirect_day = days_name[day - 1]
    redirect_url = reverse('days-of-week', args=[redirect_day]) # reverse(name of path, value that put in days-of-week). # in this way we do not need to write before path (days/...)
    return HttpResponseRedirect(redirect_url)
```

urls file:
```
path('<str:day>', views.dynamic_days, name='days-of-week'),
```


# 01-Bacics

## Templates

- create templates folder -> create <name of app> folder -> create html file. (conventional)

- read data from html fil and render it:
```
from django.template.loader import render_to_string

def dynamic_days(request, day):
    response_data = render_to_string('challenges/challenge.html') # pass path of html code and get string data of it
    return HttpResponse(response_data)
```

- we can use bottom code instead of above code:
```
def dynamic_days(request, day):
    return render(request, 'challenges/challenge.html') # render(request, 'challenges/challenge.html')
```


### DTL (django template language)
- use dynamic value in html code:
```
def dynamic_days(request, day):
    day_data = days.get(day)
    context = {	# for DTL we must use dictionary 
            "data": day_data
        }
    return render(request, 'challenges/challenge.html') # render(request, 'challenges/challenge.html', context) # read context from 'challenges/challenge.html'
```

html form:
```
<h2>{{ data }}</h2> # 
```


### Django Templates Filter

- they are built in methods (for example: upper(), captalize(), ...)
form of using django templates filter:
```
<h1>{{ day | title }}</h1> # more features in django docs
```


### Template Tags

- {% %} # template tags form

- we can use template tags in html tags for write logic codes in it

#### For loop tag
```
<ul>
        {% for day in days %} # create list
        <li>
            <a href="/days/"> {{ day | title }} </a>
        </li>
        {% endfor %}
    </ul>
```

#### URL tags for dynamic address
```
<a href="{% url 'days-of-week' day %}"> {{ day | title }} </a> # href="{% url 'name of destination address' parameters-that-you-want pass %}"
```

#### If tags
```
{% if data is not None  %}
    <h2>{{ data }}</h2>
{% else %}
    <p>there is no data</p>
{% endif %}
```

### Extends in Templates

- we can create base html file for where we have same struct in our html code.

- base file:
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        {% block page_title %}روزهای هفته{% endblock  %} # we use block to put dynamic value everywhere we want use this base
    </title>
</head>
<body>
    <div style="border: 1px solid red">
        {% block content %}
            <p>پروژه روزهای هفته</p>
        {% endblock  %}
    </div>
</body>
</html>
```

- file that extends:
```
# all things in base.html file will be extended and we can add new things to it

{% extends 'base.html' %} # extends from name of the base html file (we can also write relative path but here we use absolute path so we should add path of this file into: settings.py >> TEMPLATES >> DIRS >> BASE_DIR / "path"

{% block page_title %} # change title block
days info
{% endblock  %}
    
{% block content %} # change content block
<h1>{{ day | title }}</h1>
    {% if data is not None  %}
    <h2>{{ data }}</h2>
    {% else %}
    <p>there is no data</p>
    {% endif %}
{% endblock  %}
```

### Includes in Templates

- use for same componemts like footer or header
- create includes folder in templates/challenges, and create file in include file.

- include header file:
```
<header>
    <nav>
        <a href="{% url 'days_list' %}">روزهای هفته</a>
    </nav>
</header>
```

- include above code in everywhere we want:
```
{% include 'challenges/includes/header.html' %}
```

## 404 Response

```
from django.http import Http404

raise Http404() # everywhere we want raise 404 error
```


## Static files

- for using static files like css, js, ... , we should add a folder named 'static' for each app.
- at first check existing 'django.contrib.staticfiles' in installed apps of settings.py
- for using stactic files in our html file add load block:
```
{% load static %}
```

- then:
```
<link rel="stylesheet" href="{% static "challenges/challenges.css" %}"> # in href add static block and write path of intended file (it must be in static folder)
```


-if you want add static file to global and base of the project, in default, load static, search static folders in apps and do not find it in root. for fix it you should add bottom code at: settings.py >> bottem of the page >> under STATIC_URL:
```
STATICFILES_DIRS = [
     BASE_DIR / "static/" # add new static file base dir
]
```
- the rest of commands is same as before

